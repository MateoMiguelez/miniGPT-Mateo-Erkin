# -*- coding: utf-8 -*-
"""Minigpt.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wYtUcEgHUZhftXCEB6PlGpT_9d3_IC7T
"""

import torch
import torch.nn as nn
from torch.nn import functional as F
import tiktoken
import torchbnn as bnn  # Bayesian neural networks library


# hyperparameters
batch_size = 16 # how many independent sequences will we process in parallel?
block_size = 64 # what is the maximum context length for predictions?
max_iters = 50000
eval_interval = 10
learning_rate = 1e-3
device = 'cuda' if torch.cuda.is_available() else 'cpu'
eval_iters = 200
n_embd = 128
n_head = 4
n_layer = 4
dropout = 0.3
dictionary_size = 3000

# ------------

torch.manual_seed(1327)
#dtype = torch.FloatTensor
dtype = torch.cuda.FloatTensor # Uncomment this to run on GPU


with open('input.txt', 'r', encoding='utf-8') as f:
    text = f.read()


text_val = [ord(c) for c in text]
text_section = text_val
zort = max(text_section)+1


def average_len(dic):
    avg = 0
    for k,s in dic.items():
        avg += len(s)
    return avg/len(dic)

def erkinizer(t):
  decoding_dic ={}
  zort = max(t)
  for d in range(dictionary_size):
    pairs = {}
    print(" \rTokenizing, ", d/dictionary_size*100,"%", end='')
    for i in range(len(t)-1):
      mateo = (t[i], t[i+1])
      if mateo in pairs:
        pairs[mateo] += 1
      else:
        pairs[mateo] = 1
    most_frequent_pair = max(pairs, key=pairs.get)

    # Create a new token for the pair
    first_str = ''
    second_str = ''
    if(most_frequent_pair[0] > zort):
      first_str = decoding_dic[most_frequent_pair[0]]
    else:
      first_str = str(chr(most_frequent_pair[0]))
    if(most_frequent_pair[1] > zort):
      second_str = decoding_dic[most_frequent_pair[1]]
    else:
      second_str = str(chr(most_frequent_pair[1]))

    new_token = first_str + second_str
        # Convert the new token to an integer (you can use a unique number or some other encoding logic)
    new_token_int = zort + d   # Example: use a unique integer based on the current iteration

        # Add the new token to the decoding dictionary
    decoding_dic[new_token_int] = new_token

        # Replace the most frequent pair with the new token
    i = 0
    while i < len(t) - 1:
        if (t[i], t[i+1]) == most_frequent_pair:
            # Replace the pair with the new token integer
            t[i] = new_token_int
            del t[i+1]  # Remove the second part of the pair
            i += 1  # Skip the next item as it's part of the pair
        i += 1

  return t,decoding_dic

def derkinizer(dic,t):
  full_text = ''
  for i in t:
    if(i<=zort):
      full_text = full_text + chr(i)
    else:
      full_text = full_text + dic[i]
  return full_text

encoded_text,decoder = (erkinizer(text_section))

#with open(str('diccionary',str(dictionary_size),'.txt'), 'w') as output:
#    output.write(decoder)
#output.close()

#with open(str('encoded_text_',str(dictionary_size),'.txt'), 'w') as output:
#    output.write(encoded_text)
#output.close()

# Train and test splits
vocab_size = max(encoded_text)+1
data = torch.tensor((encoded_text), dtype=torch.long)
n = int(0.9*len(data)) # first 90% will be train, rest val
train_data = data[:n]
val_data = data[n:]

# data loading
def get_batch(split):
    # generate a small batch of data of inputs x and targets y
    data = train_data if split == 'train' else val_data
    ix = torch.randint(len(data) - block_size, (batch_size,))
    x = torch.stack([data[i:i+block_size] for i in ix])
    y = torch.stack([data[i+1:i+block_size+1] for i in ix])
    x, y = x.to(device), y.to(device)
    return x, y

@torch.no_grad()
def estimate_loss():
    out = {}
    model.eval()
    for split in ['train', 'val']:
        losses = torch.zeros(eval_iters)
        for k in range(eval_iters):
            X, Y = get_batch(split)
            logits, loss = model(X, Y)
            losses[k] = loss.item()
        out[split] = losses.mean()
    model.train()
    return out

class Head(nn.Module):
    """ one head of self-attention """

    def __init__(self, head_size):
        super().__init__()
        self.key = nn.Linear(n_embd, head_size, bias=False)
        self.query = nn.Linear(n_embd, head_size, bias=False)
        self.value = nn.Linear(n_embd, head_size, bias=False)
        self.register_buffer('tril', torch.tril(torch.ones(block_size, block_size)))

        self.dropout = nn.Dropout(dropout)

    def forward(self, x):
        B,T,C = x.shape
        k = self.key(x)   # (B,T,C)
        q = self.query(x) # (B,T,C)
        # compute attention scores ("affinities")
        wei = q @ k.transpose(-2,-1) * C**-0.5 # (B, T, C) @ (B, C, T) -> (B, T, T)
        wei = wei.masked_fill(self.tril[:T, :T] == 0, float('-inf')) # (B, T, T)
        wei = F.softmax(wei, dim=-1) # (B, T, T)
        wei = self.dropout(wei)
        # perform the weighted aggregation of the values
        v = self.value(x) # (B,T,C)
        out = wei @ v # (B, T, T) @ (B, T, C) -> (B, T, C)
        return out

class MultiHeadAttention(nn.Module):
    """ multiple heads of self-attention in parallel """

    def __init__(self, num_heads, head_size):
        super().__init__()
        self.heads = nn.ModuleList([Head(head_size) for _ in range(num_heads)])
        self.proj = nn.Linear(n_embd, n_embd)
        self.dropout = nn.Dropout(dropout)

    def forward(self, x):
        out = torch.cat([h(x) for h in self.heads], dim=-1)
        out = self.dropout(self.proj(out))
        return out

class FeedFoward(nn.Module):
    """ a simple linear layer followed by a non-linearity """

    def __init__(self, n_embd):
        super().__init__()
        self.net = nn.Sequential(
            nn.Linear(n_embd, 4 * n_embd),
            nn.ReLU(),
            nn.Linear(4 * n_embd, n_embd),
            nn.Dropout(dropout),
        )

    def forward(self, x):
        return self.net(x)

class Block(nn.Module):
    """ Transformer block: communication followed by computation """

    def __init__(self, n_embd, n_head):
        # n_embd: embedding dimension, n_head: the number of heads we'd like
        super().__init__()
        head_size = n_embd // n_head
        self.sa = MultiHeadAttention(n_head, head_size)
        self.ffwd = FeedFoward(n_embd)
        self.ln1 = nn.LayerNorm(n_embd)
        self.ln2 = nn.LayerNorm(n_embd)

    def forward(self, x):
        x = x + self.sa(self.ln1(x))
        x = x + self.ffwd(self.ln2(x))
        return x

# super simple bigram model
class BigramLanguageModel(nn.Module):

    def __init__(self):
        super().__init__()
        # each token directly reads off the logits for the next token from a lookup table
        self.token_embedding_table = nn.Embedding(vocab_size, n_embd)
        self.position_embedding_table = nn.Embedding(block_size, n_embd)
        self.blocks = nn.Sequential(*[Block(n_embd, n_head=n_head) for _ in range(n_layer)])
        self.ln_f = nn.LayerNorm(n_embd) # final layer norm
        self.lm_head = nn.Linear(n_embd, vocab_size)

    def forward(self, idx, targets=None):
        B, T = idx.shape

        # idx and targets are both (B,T) tensor of integers
        tok_emb = self.token_embedding_table(idx) # (B,T,C)
        pos_emb = self.position_embedding_table(torch.arange(T, device=device)) # (T,C)
        x = tok_emb + pos_emb # (B,T,C)
        x = self.blocks(x) # (B,T,C)
        x = self.ln_f(x) # (B,T,C)
        logits = self.lm_head(x) # (B,T,vocab_size)

        if targets is None:
            loss = None
        else:
            B, T, C = logits.shape
            logits = logits.view(B*T, C)
            targets = targets.view(B*T)
            loss = F.cross_entropy(logits, targets)

        return logits, loss

    def generate(self, idx, max_new_tokens):
        # idx is (B, T) array of indices in the current context
        for _ in range(max_new_tokens):
            # crop idx to the last block_size tokens
            idx_cond = idx[:, -block_size:]
            # get the predictions
            logits, loss = self(idx_cond)
            # focus only on the last time step
            logits = logits[:, -1, :] # becomes (B, C)
            # apply softmax to get probabilities
            probs = F.softmax(logits, dim=-1) # (B, C)
            # sample from the distribution
            idx_next = torch.multinomial(probs, num_samples=1) # (B, 1)
            # append sampled index to the running sequence
            idx = torch.cat((idx, idx_next), dim=1) # (B, T+1)
        return idx

model = BigramLanguageModel()
m = model.to(device)
# print the number of parameters in the model
print('\r', sum(p.numel() for p in m.parameters())/1e6, 'M parameters')

# create a PyTorch optimizer
optimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate)

for iter in range(max_iters):

    # every once in a while evaluate the loss on train and val sets
    if iter % eval_interval == 0 or iter == max_iters - 1:
        losses = estimate_loss()
        print(f"step {iter}: train loss {losses['train']:.4f}, val loss {losses['val']:.4f}")

    # sample a batch of data
    xb, yb = get_batch('train')

    # evaluate the loss
    logits, loss = model(xb, yb)
    optimizer.zero_grad(set_to_none=True)
    loss.backward()
    optimizer.step()

# generate from the model
context = torch.zeros((1, 1), dtype=torch.long, device=device)
oho = (m.generate(context, max_new_tokens=2000)[0].tolist())
generated_text = derkinizer(decoder,oho)
print(generated_text)

#with open('generated.txt', 'w') as output:
#    output.write(generated_text)

#output.close()

print('Average token string length: ', average_len(decoder))
